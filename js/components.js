// js/components.js

const universeData = [
    {
        id: 1,
        name: 'universes.prathamanuyoga.name',
        subtitle: 'universes.prathamanuyoga.subtitle',
        description: 'universes.prathamanuyoga.description',
        color: 'universe-1',
        isUnlocked: true,
        progress: 25,
        stages: 2
    },
    {
        id: 2,
        name: 'universes.karananuyoga.name',
        subtitle: 'universes.karananuyoga.subtitle',
        description: 'universes.karananuyoga.description',
        color: 'universe-2',
        isUnlocked: false,
        progress: 0,
        stages: 2
    },
    {
        id: 3,
        name: 'universes.charananuyoga.name',
        subtitle: 'universes.charananuyoga.subtitle',
        description: 'universes.charananuyoga.description',
        color: 'universe-3',
        isUnlocked: false,
        progress: 0,
        stages: 3
    },
    {
        id: 4,
        name: 'universes.dravyanuyoga.name',
        subtitle: 'universes.dravyanuyoga.subtitle',
        description: 'universes.dravyanuyoga.description',
        color: 'universe-4',
        isUnlocked: true,
        progress: 0,
        stages: 2
    }
];

// Comprehensive Karma Data with all details from the book
const karmaTypes = [
    {
        id: 'jnanavarana',
        name: 'J√±ƒÅnƒÅvara·πáa Karma',
        nameHi: '‡§ú‡•ç‡§û‡§æ‡§®‡§æ‡§µ‡§∞‡§£ ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma obscures the soul\'s innate quality of infinite knowledge',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§Ö‡§®‡§Ç‡§§ ‡§ú‡•ç‡§û‡§æ‡§® ‡§ó‡•Å‡§£ ‡§ï‡•ã ‡§Ü‡§µ‡•É‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a cloth covering the face of a deity',
        analogyHi: '‡§¶‡•á‡§µ‡§§‡§æ ‡§ï‡•á ‡§Æ‡•Å‡§ñ ‡§™‡§∞ ‡§¢‡§ï‡•á ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§®',
        color: '#FF6B6B',
        particles: 'üü•',
        causes: [
            'Hiding the name of a teacher or guru',
            'Creating obstacles in someone\'s study',
            'Feeling jealous when hearing about someone\'s knowledge',
            'Misusing tools of knowledge',
            'Refusing to share knowledge out of ego'
        ],
        causesHi: [
            '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ó‡•Å‡§∞‡•Å ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§õ‡•Å‡§™‡§æ‡§®‡§æ',
            '‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§ß‡§æ ‡§°‡§æ‡§≤‡§®‡§æ',
            '‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•Ä ‡§Æ‡§π‡§ø‡§Æ‡§æ ‡§∏‡•Å‡§®‡§ï‡§∞ ‡§à‡§∞‡•ç‡§∑‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§µ ‡§∞‡§ñ‡§®‡§æ',
            '‡§ú‡•ç‡§û‡§æ‡§® ‡§ï‡•á ‡§∏‡§æ‡§ß‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§¶‡•Å‡§∞‡•Å‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ',
            '‡§Ö‡§π‡§Ç‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§ú‡•ç‡§û‡§æ‡§® ‡§® ‡§¶‡•á‡§®‡§æ'
        ],
        type: 'ghatiya'
    },
    {
        id: 'darshanavarana',
        name: 'Dar≈õanƒÅvara·πáa Karma',
        nameHi: '‡§¶‡§∞‡•ç‡§∂‡§®‡§æ‡§µ‡§∞‡§£ ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma obscures the soul\'s power of perception and spiritual insight',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§¶‡§∞‡•ç‡§∂‡§® ‡§ó‡•Å‡§£ ‡§ï‡•ã ‡§Ü‡§µ‡•É‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a gatekeeper blocking entry',
        analogyHi: '‡§¶‡•ç‡§µ‡§æ‡§∞‡§™‡§æ‡§≤ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§®',
        color: '#4ECDC4',
        particles: 'üü¢',
        causes: [
            'Perception pride and ego about one\'s spiritual attainments',
            'Creating obstacles to spiritual practice',
            'Bursting someone\'s eyes or damaging sight',
            'Sleeping during daytime out of laziness',
            'Promoting atheistic views'
        ],
        causesHi: [
            '‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡§æ‡§§‡•ç‡§∏‡•ç‡§Ø‡§∞‡•ç‡§Ø ‡§î‡§∞ ‡§Ö‡§π‡§Ç‡§ï‡§æ‡§∞',
            '‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§ß‡§æ ‡§°‡§æ‡§≤‡§®‡§æ',
            '‡§Ü‡§Ç‡§ñ‡•á‡§Ç ‡§´‡•ã‡§°‡§º‡§®‡§æ ‡§Ø‡§æ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø ‡§ï‡•ã ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§™‡§π‡•Å‡§Ç‡§ö‡§æ‡§®‡§æ',
            '‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§≤‡§∏‡•ç‡§Ø ‡§∏‡•á ‡§∏‡•ã‡§®‡§æ',
            '‡§®‡§æ‡§∏‡•ç‡§§‡§ø‡§ï‡§§‡§æ ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§¶‡•á‡§®‡§æ'
        ],
        type: 'ghatiya'
    },
    {
        id: 'vedaniya',
        name: 'Vedanƒ´ya Karma',
        nameHi: '‡§µ‡•á‡§¶‡§®‡•Ä‡§Ø ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma causes the soul to experience pleasure (sƒÅtƒÅ) and pain (asƒÅtƒÅ)',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•ã ‡§∏‡•Å‡§ñ-‡§¶‡•Å‡§ñ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞‡§æ‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a sword blade coated with honey - sweet to taste but cuts the tongue',
        analogyHi: '‡§∂‡§ï‡•ç‡§ï‡§∞ ‡§ï‡•Ä ‡§ö‡§æ‡§∂‡§®‡•Ä ‡§∏‡•á ‡§≤‡§ø‡§™‡§ü‡•Ä ‡§§‡§≤‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§®',
        color: '#45B7D1',
        particles: 'üîµ',
        subtypes: ['SƒÅtƒÅ Vedanƒ´ya (Pleasure-producing)', 'AsƒÅtƒÅ Vedanƒ´ya (Pain-producing)'],
        subtypesHi: ['‡§∏‡§æ‡§§‡§æ‡§µ‡•á‡§¶‡§®‡•Ä‡§Ø (‡§∏‡•Å‡§ñ ‡§ï‡§∞‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ)', '‡§Ö‡§∏‡§æ‡§§‡§æ‡§µ‡•á‡§¶‡§®‡•Ä‡§Ø (‡§¶‡•Å‡§ñ ‡§ï‡§∞‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ)'],
        causes: {
            sata: ['Compassion towards all beings', 'Following vows', 'Giving charity', 'Keeping peace in heart'],
            asata: ['Causing pain to others', 'Violence and cruelty', 'Speaking harshly', 'Creating sorrow']
        },
        causesHi: {
            sata: ['‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§æ‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§Ö‡§®‡•Å‡§ï‡§Æ‡•ç‡§™‡§æ', '‡§µ‡•ç‡§∞‡§§‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§®', '‡§¶‡§æ‡§® ‡§¶‡•á‡§®‡§æ', '‡§π‡•É‡§¶‡§Ø ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§∞‡§ñ‡§®‡§æ'],
            asata: ['‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§¶‡•Å‡§ñ ‡§™‡§π‡•Å‡§Ç‡§ö‡§æ‡§®‡§æ', '‡§π‡§ø‡§Ç‡§∏‡§æ ‡§î‡§∞ ‡§ï‡•ç‡§∞‡•Ç‡§∞‡§§‡§æ', '‡§ï‡§†‡•ã‡§∞ ‡§µ‡§ö‡§® ‡§¨‡•ã‡§≤‡§®‡§æ', '‡§∂‡•ã‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡§®‡§æ']
        },
        type: 'aghatiya'
    },
    {
        id: 'mohaniya',
        name: 'Mohanƒ´ya Karma',
        nameHi: '‡§Æ‡•ã‡§π‡§®‡•Ä‡§Ø ‡§ï‡§∞‡•ç‡§Æ',
        function: 'The most powerful karma that attacks the soul\'s faith and conduct, causing delusion',
        functionHi: '‡§∏‡§¨‡§∏‡•á ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä ‡§ï‡§∞‡•ç‡§Æ ‡§ú‡•ã ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§∏‡§Æ‡•ç‡§Ø‡§ï‡•ç‡§§‡•ç‡§µ ‡§î‡§∞ ‡§ö‡§æ‡§∞‡§ø‡§§‡•ç‡§∞ ‡§ó‡•Å‡§£ ‡§ï‡•ã ‡§ò‡§æ‡§§‡§§‡§æ ‡§π‡•à',
        analogy: 'Like intoxicating wine that clouds judgment',
        analogyHi: '‡§Æ‡§¶‡§ø‡§∞‡§æ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§ú‡•ã ‡§µ‡§ø‡§µ‡•á‡§ï ‡§ï‡•ã ‡§®‡§∑‡•ç‡§ü ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à',
        color: '#F39C12',
        particles: 'üü°',
        subtypes: ['Dar≈õana Mohanƒ´ya (Faith-deluding)', 'CƒÅritra Mohanƒ´ya (Conduct-deluding)'],
        subtypesHi: ['‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•ã‡§π‡§®‡•Ä‡§Ø (‡§Æ‡§ø‡§•‡•ç‡§Ø‡§æ‡§§‡•ç‡§µ)', '‡§ö‡§æ‡§∞‡§ø‡§§‡•ç‡§∞ ‡§Æ‡•ã‡§π‡§®‡•Ä‡§Ø (‡§ö‡§æ‡§∞‡§ø‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§≠‡•ç‡§∞‡§∑‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ)'],
        causes: [
            'Finding false faults in Kevalƒ´, scriptures, or religion',
            'Intense passions like anger, pride, deceit, greed',
            'Preventing someone from taking vows',
            'Leading others away from righteous path'
        ],
        causesHi: [
            '‡§ï‡•á‡§µ‡§≤‡•Ä, ‡§∂‡§æ‡§∏‡•ç‡§§‡•ç‡§∞, ‡§ß‡§∞‡•ç‡§Æ ‡§Æ‡•á‡§Ç ‡§ù‡•Ç‡§†‡•á ‡§¶‡•ã‡§∑ ‡§≤‡§ó‡§æ‡§®‡§æ',
            '‡§ï‡•ç‡§∞‡•ã‡§ß, ‡§Æ‡§æ‡§®, ‡§Æ‡§æ‡§Ø‡§æ, ‡§≤‡•ã‡§≠ ‡§ï‡•Ä ‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ',
            '‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§µ‡•ç‡§∞‡§§ ‡§≤‡•á‡§®‡•á ‡§∏‡•á ‡§∞‡•ã‡§ï‡§®‡§æ',
            '‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§ß‡§∞‡•ç‡§Æ ‡§∏‡•á ‡§≠‡•ç‡§∞‡§∑‡•ç‡§ü ‡§ï‡§∞‡§®‡§æ'
        ],
        type: 'ghatiya'
    },
    {
        id: 'ayu',
        name: 'ƒÄyu Karma',
        nameHi: '‡§Ü‡§Ø‡•Å ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma determines lifespan and binds the soul to a specific body type',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§ú‡•Ä‡§µ‡§®‡§ï‡§æ‡§≤ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•ã ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∂‡§∞‡•Ä‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§Ç‡§ß‡§§‡§æ ‡§π‡•à',
        analogy: 'Like fetters that bind a person to a specific place',
        analogyHi: '‡§¨‡•á‡§°‡§º‡•Ä ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§ú‡•ã ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡§∞ ‡§¨‡§æ‡§Ç‡§ß‡§§‡•Ä ‡§π‡•à',
        color: '#9B59B6',
        particles: 'üü£',
        subtypes: ['NarakƒÅyu (Hell)', 'TiryakƒÅyu (Animal)', 'Manu·π£yƒÅyu (Human)', 'DevƒÅyu (Divine)'],
        subtypesHi: ['‡§®‡§∞‡§ï‡§æ‡§Ø‡•Å (‡§®‡§∞‡§ï)', '‡§§‡§ø‡§∞‡•ç‡§Ø‡§û‡•ç‡§ö‡§æ‡§Ø‡•Å (‡§§‡§ø‡§∞‡•ç‡§Ø‡§Ç‡§ö)', '‡§Æ‡§®‡•Å‡§∑‡•ç‡§Ø‡§æ‡§Ø‡•Å (‡§Æ‡§®‡•Å‡§∑‡•ç‡§Ø)', '‡§¶‡•á‡§µ‡§æ‡§Ø‡•Å (‡§¶‡•á‡§µ)'],
        causes: {
            naraka: ['Excessive violence and possessiveness'],
            tiryak: ['Deception, betrayal, teaching wrong path'],
            manushya: ['Natural gentle nature, little greed, modest possessions'],
            deva: ['Following restraints, giving charity, serving worthy people']
        },
        type: 'aghatiya'
    },
    {
        id: 'nama',
        name: 'NƒÅma Karma',
        nameHi: '‡§®‡§æ‡§Æ ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma determines body structure, appearance, and form - auspicious or inauspicious',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§∂‡§∞‡•Ä‡§∞ ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ, ‡§∞‡•Ç‡§™ ‡§î‡§∞ ‡§Ü‡§ï‡§æ‡§∞ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a painter who creates different kinds of pictures',
        analogyHi: '‡§ö‡§ø‡§§‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§ú‡•ã ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à',
        color: '#E67E22',
        particles: 'üü†',
        causes: {
            auspicious: ['Straightforwardness in mind, speech, body', 'Stable mind', 'Honest dealings'],
            inauspicious: ['Crookedness in thought, word, deed', 'Deception', 'Dishonest measurements']
        },
        causesHi: {
            auspicious: ['‡§Æ‡§®, ‡§µ‡§ö‡§®, ‡§ï‡§æ‡§Ø ‡§ï‡•Ä ‡§∏‡§∞‡§≤‡§§‡§æ', '‡§ö‡§ø‡§§‡•ç‡§§ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§∞‡§§‡§æ', '‡§à‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§µ‡§π‡§æ‡§∞'],
            inauspicious: ['‡§Æ‡§®, ‡§µ‡§ö‡§®, ‡§ï‡§æ‡§Ø ‡§ï‡•Ä ‡§ï‡•Å‡§ü‡§ø‡§≤‡§§‡§æ', '‡§õ‡§≤-‡§ï‡§™‡§ü', '‡§¨‡•á‡§à‡§Æ‡§æ‡§® ‡§®‡§æ‡§™-‡§§‡•å‡§≤']
        },
        type: 'aghatiya'
    },
    {
        id: 'gotra',
        name: 'Gotra Karma',
        nameHi: '‡§ó‡•ã‡§§‡•ç‡§∞ ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma determines family status, social position - high or low birth',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡•ç‡§•‡§ø‡§§‡§ø, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§∑‡•ç‡§†‡§æ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a potter who shapes different types of vessels from the same clay',
        analogyHi: '‡§ï‡•Å‡§Æ‡•ç‡§≠‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§ú‡•ã ‡§è‡§ï ‡§π‡•Ä ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•á ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§¨‡§∞‡•ç‡§§‡§® ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à',
        color: '#95A5A6',
        particles: '‚ö´',
        subtypes: ['Ucca Gotra (High status)', 'Nƒ´ca Gotra (Low status)'],
        subtypesHi: ['‡§â‡§ö‡•ç‡§ö ‡§ó‡•ã‡§§‡•ç‡§∞ (‡§â‡§ö‡•ç‡§ö ‡§∏‡•ç‡§•‡§ø‡§§‡§ø)', '‡§®‡•Ä‡§ö ‡§ó‡•ã‡§§‡•ç‡§∞ (‡§®‡§ø‡§Æ‡•ç‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø)'],
        causes: {
            high: ['Self-criticism, praising others', 'Hiding own good qualities', 'Devotion to Arhants'],
            low: ['Self-praise, criticizing others', 'Displaying own qualities', 'Lack of devotion']
        },
        type: 'aghatiya'
    },
    {
        id: 'antaraya',
        name: 'AntarƒÅya Karma',
        nameHi: '‡§Ö‡§Ç‡§§‡§∞‡§æ‡§Ø ‡§ï‡§∞‡•ç‡§Æ',
        function: 'This karma creates obstacles in giving, gaining, enjoying, and exerting power',
        functionHi: '‡§Ø‡§π ‡§ï‡§∞‡•ç‡§Æ ‡§¶‡§æ‡§®, ‡§≤‡§æ‡§≠, ‡§≠‡•ã‡§ó ‡§î‡§∞ ‡§µ‡•Ä‡§∞‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§ò‡•ç‡§® ‡§°‡§æ‡§≤‡§§‡§æ ‡§π‡•à',
        analogy: 'Like a treasurer who blocks access to the king\'s wealth',
        analogyHi: '‡§≠‡§Ç‡§°‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§∏‡§Æ‡§æ‡§® ‡§ú‡•ã ‡§∞‡§æ‡§ú‡§æ ‡§ï‡•á ‡§ß‡§® ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§§‡§æ ‡§π‡•à',
        color: '#E74C3C',
        particles: 'üî¥',
        causes: [
            'Creating obstacles in others\' charity',
            'Stopping worship or religious activities',
            'Consuming offerings meant for deities',
            'Hiding one\'s own capabilities'
        ],
        causesHi: [
            '‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§¶‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§ß‡§æ ‡§°‡§æ‡§≤‡§®‡§æ',
            '‡§™‡•Ç‡§ú‡§æ ‡§Ø‡§æ ‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§®‡§æ',
            '‡§¶‡•á‡§µ‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§∞‡•ç‡§™‡§ø‡§§ ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡•á‡§µ‡§®',
            '‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ï‡•ç‡§§‡§ø ‡§ï‡•ã ‡§õ‡•Å‡§™‡§æ‡§®‡§æ'
        ],
        type: 'ghatiya'
    }
];

// Ten States of Karma with comprehensive details
const karmaStates = [
    {
        id: 'bandha',
        name: 'Bandha (Bondage)',
        nameHi: '‡§¨‡§Ç‡§ß (‡§¨‡§Ç‡§ß‡§®)',
        definition: 'The binding of karmic matter to the soul due to activities',
        definitionHi: '‡§ï‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§™‡•Å‡§¶‡•ç‡§ó‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§Ü‡§§‡•ç‡§Æ‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§∏‡•ç‡§•‡§æ‡§™‡§ø‡§§ ‡§π‡•ã‡§®‡§æ',
        example: 'Getting hired for a 10-year job contract on August 17, 2005',
        exampleHi: '17 ‡§Ö‡§ó‡§∏‡•ç‡§§ 2005 ‡§ï‡•ã 10 ‡§∏‡§æ‡§≤ ‡§ï‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡§®‡§æ',
        gunasthana: '1-13',
        color: '#FF6B6B'
    },
    {
        id: 'sattva',
        name: 'Sattva (Existence)',
        nameHi: '‡§∏‡§§‡•ç‡§µ (‡§Ö‡§∏‡•ç‡§§‡§ø‡§§‡•ç‡§µ)',
        definition: 'State between bondage and fruition where karma exists but remains inactive',
        definitionHi: '‡§¨‡§Ç‡§ß ‡§î‡§∞ ‡§â‡§¶‡§Ø ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ú‡§π‡§æ‡§Ç ‡§ï‡§∞‡•ç‡§Æ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à ‡§™‡§∞ ‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à',
        example: 'Period from August 17 to October 1, 2005 - hired but not yet working',
        exampleHi: '17 ‡§Ö‡§ó‡§∏‡•ç‡§§ ‡§∏‡•á 1 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ 2005 ‡§§‡§ï - ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§™‡§∞ ‡§Ö‡§≠‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§à',
        gunasthana: '1-14',
        color: '#4ECDC4'
    },
    {
        id: 'udaya',
        name: 'Udaya (Rise/Fruition)',
        nameHi: '‡§â‡§¶‡§Ø (‡§´‡§≤‡§¶‡§æ‡§®)',
        definition: 'When karma gives its results according to nature, duration, intensity and quantity',
        definitionHi: '‡§ú‡§¨ ‡§ï‡§∞‡•ç‡§Æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø, ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§´‡§≤ ‡§¶‡•á‡§§‡§æ ‡§π‡•à',
        example: 'Starting work on October 2, 2005 and receiving salary',
        exampleHi: '2 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ 2005 ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡§æ ‡§î‡§∞ ‡§µ‡•á‡§§‡§® ‡§Æ‡§ø‡§≤‡§®‡§æ',
        gunasthana: '1-14',
        color: '#F39C12'
    },
    {
        id: 'udirana',
        name: 'Udƒ´ra·πáƒÅ (Premature Rise)',
        nameHi: '‡§â‡§¶‡•Ä‡§∞‡§£‡§æ (‡§™‡•Ç‡§∞‡•ç‡§µ ‡§â‡§¶‡§Ø)',
        definition: 'Bringing karma to fruition before its natural time',
        definitionHi: '‡§ï‡§∞‡•ç‡§Æ ‡§ï‡•ã ‡§∏‡•ç‡§µ‡§æ‡§≠‡§æ‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§´‡§≤ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•á‡§∞‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ',
        example: 'Being called to start work on October 1st instead of 2nd',
        exampleHi: '2 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø 1 ‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞ ‡§ï‡•ã ‡§ï‡§æ‡§Æ ‡§™‡§∞ ‡§¨‡•Å‡§≤‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ',
        gunasthana: '1-13',
        color: '#9B59B6'
    },
    {
        id: 'utkarshana',
        name: 'Utkar·π£a·πáa (Intensification)',
        nameHi: '‡§â‡§§‡•ç‡§ï‡§∞‡•ç‡§∑‡§£ (‡§§‡•Ä‡§µ‡•ç‡§∞‡§§‡§æ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø)',
        definition: 'Increasing the duration and intensity of previously bound karma',
        definitionHi: '‡§™‡•Ç‡§∞‡•ç‡§µ ‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø',
        example: 'Job contract extended from 10 years to 11 years',
        exampleHi: '‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§¨‡§Ç‡§ß 10 ‡§∏‡§æ‡§≤ ‡§∏‡•á ‡§¨‡§¢‡§º‡§ï‡§∞ 11 ‡§∏‡§æ‡§≤ ‡§π‡•ã ‡§ú‡§æ‡§®‡§æ',
        gunasthana: '1-13',
        color: '#E74C3C'
    },
    {
        id: 'apakrshana',
        name: 'Apakar·π£a·πáa (Attenuation)',
        nameHi: '‡§Ö‡§™‡§ï‡§∞‡•ç‡§∑‡§£ (‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§æ)',
        definition: 'Decreasing the duration and intensity of previously bound karma',
        definitionHi: '‡§™‡•Ç‡§∞‡•ç‡§µ ‡§¨‡§¶‡•ç‡§ß ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§≠‡§æ‡§ó ‡§Æ‡•á‡§Ç ‡§ï‡§Æ‡•Ä',
        example: 'King Shrenika\'s hell-life reduced from 33 sagaras to 84,000 years due to right faith',
        exampleHi: '‡§∞‡§æ‡§ú‡§æ ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§ï ‡§ï‡•Ä ‡§®‡§∞‡§ï ‡§Ü‡§Ø‡•Å 33 ‡§∏‡§æ‡§ó‡§∞ ‡§∏‡•á ‡§ò‡§ü‡§ï‡§∞ 84,000 ‡§µ‡§∞‡•ç‡§∑ ‡§π‡•ã ‡§ú‡§æ‡§®‡§æ',
        gunasthana: '1-13',
        color: '#27AE60'
    },
    {
        id: 'sankramana',
        name: 'Sa·πÖkrama·πáa (Transformation)',
        nameHi: '‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ (‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®)',
        definition: 'Transformation of one karma subtype into another of the same main type',
        definitionHi: '‡§è‡§ï ‡§ï‡§∞‡•ç‡§Æ ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§ï‡§æ ‡§¶‡•Ç‡§∏‡§∞‡•Ä ‡§™‡•ç‡§∞‡§ï‡•É‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®',
        example: 'Transfer from one factory department to another',
        exampleHi: '‡§è‡§ï ‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§µ‡§ø‡§≠‡§æ‡§ó ‡§∏‡•á ‡§¶‡•Ç‡§∏‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§æ‡§®‡§æ‡§Ç‡§§‡§∞‡§£',
        gunasthana: '1-10, some in 11th',
        color: '#8E44AD'
    },
    {
        id: 'upashama',
        name: 'Upa≈õama (Subsidence)',
        nameHi: '‡§â‡§™‡§∂‡§Æ (‡§∂‡§Æ‡§®)',
        definition: 'Temporary suppression of karma without destroying it',
        definitionHi: '‡§ï‡§∞‡•ç‡§Æ ‡§ï‡§æ ‡§®‡§æ‡§∂ ‡§ï‡§ø‡§è ‡§¨‡§ø‡§®‡§æ ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡§¨‡§æ ‡§¶‡•á‡§®‡§æ',
        example: 'Factory closed but job contract remains valid',
        exampleHi: '‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ó‡§à ‡§™‡§∞ ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§¨‡§Ç‡§ß ‡§µ‡•à‡§ß ‡§π‡•à',
        gunasthana: '1-8',
        color: '#3498DB'
    },
    {
        id: 'nidhatti',
        name: 'Nidhatti (Non-ejectable)',
        nameHi: '‡§®‡§ø‡§ß‡§§‡•ç‡§§‡§ø (‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•Ä‡§Ø)',
        definition: 'State where karma cannot be brought to premature fruition or transformed',
        definitionHi: '‡§ú‡§¨ ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡•ã ‡§â‡§¶‡•Ä‡§∞‡§£‡§æ ‡§Ø‡§æ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ',
        example: 'Permanent job status that cannot be changed',
        exampleHi: '‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ú‡•ã ‡§¨‡§¶‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä',
        gunasthana: '1-8',
        color: '#95A5A6'
    },
    {
        id: 'nikachitta',
        name: 'NikƒÅcitta (Absolutely Fixed)',
        nameHi: '‡§®‡§ø‡§ï‡§æ‡§ö‡§ø‡§§ (‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§É ‡§∏‡•ç‡§•‡§ø‡§∞)',
        definition: 'State where karma is completely fixed and cannot undergo any modifications',
        definitionHi: '‡§ú‡§¨ ‡§ï‡§∞‡•ç‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§É ‡§∏‡•ç‡§•‡§ø‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡•ã‡§à ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ',
        example: 'Final work schedule that cannot be altered in any way',
        exampleHi: '‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§¨‡§¶‡§≤‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§æ ‡§∏‡§ï‡§§‡•Ä',
        gunasthana: '1-8',
        color: '#2C3E50'
    }
];

// User data management
const userData = {
    xp: 150,
    level: 1,
    streak: 3,
    soulPurity: 100,
    karmaAccumulated: [],
    stage1Completed: false,
    karmaKnowledge: {
        typesLearned: [],
        classificationMastered: false,
        statesLearned: []
    }
};

function createUniverseCard(universe) {
    const card = document.createElement('div');
    card.className = `universe-card ${universe.color} ${!universe.isUnlocked ? 'locked' : ''}`;
    
    card.innerHTML = `
        <div class="universe-header">
            <div class="universe-info">
                <h4>${t(universe.name)}</h4>
                <p>${t(universe.subtitle)}</p>
            </div>
            ${!universe.isUnlocked ? '<span class="lock-icon">üîí</span>' : ''}
        </div>
        <p class="universe-description">${t(universe.description)}</p>
        <div class="universe-footer">
            <span class="stages-count">${t('universes.stages', { count: universe.stages })}</span>
            ${universe.isUnlocked ? `
                <div class="progress-info">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${universe.progress}%"></div>
                    </div>
                    <span class="progress-text">${universe.progress}%</span>
                </div>
            ` : `<span class="stages-count">${t('universes.locked')}</span>`}
        </div>
    `;
    
    if (universe.isUnlocked) {
        card.addEventListener('click', () => {
            showUniverseContent(universe);
        });
    }
    
    return card;
}

function updateUniverses() {
    const container = document.getElementById('universes-container');
    container.innerHTML = '';
    
    universeData.forEach(universe => {
        container.appendChild(createUniverseCard(universe));
    });
}

function showUniverseContent(universe) {
    if (universe.id === 4) {
        showKarmaLearning();
    } else {
        alert(`Opening ${t(universe.name)}! (Navigation coming soon)`);
    }
}

// Main Karma Learning Interface
function showKarmaLearning() {
    const mainContent = document.querySelector('.main-content');
    mainContent.innerHTML = `
        <div class="karma-learning">
            <header class="karma-header">
                <button class="back-button" onclick="goBackToUniverses()">
                    ‚Üê Back to DravyƒÅnuyoga
                </button>
                <h1>Understanding Karma</h1>
                <p>The Invisible Forces of Reality</p>
            </header>

            <div class="karma-intro">
                <div class="intro-card">
                    <h3>What is Karma?</h3>
                    <p><strong>Definition:</strong> In the world, whoever is richer or poorer, king or subject, young or old, wise or foolish - karma does not discriminate. Whatever actions one performs, one receives corresponding results. This is karma.</p>
                    <p><em>"‡§∏‡§Ç‡§∏‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§à‡§Æ‡§æ‡§®‡§¶‡§æ‡§∞ ‡§π‡•à ‡§§‡•ã ‡§µ‡§π ‡§π‡•à ‡§ï‡§∞‡•ç‡§Æ‡•§ ‡§Æ‡•Å‡§®‡§ø ‡§π‡•ã, ‡§∂‡•ç‡§∞‡§æ‡§µ‡§ï ‡§π‡•ã, ‡§∞‡§æ‡§ú‡§æ ‡§π‡•ã ‡§Ø‡§æ ‡§∞‡§Ç‡§ï, ‡§Ø‡•Å‡§µ‡§æ ‡§π‡•ã ‡§Ø‡§æ ‡§µ‡•É‡§¶‡•ç‡§ß, ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡§ï‡•ç‡§∑‡§™‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§ ‡§ú‡•Ä‡§µ ‡§ú‡•à‡§∏‡§æ ‡§ï‡§∞‡•ç‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§µ‡•à‡§∏‡§æ ‡§π‡•Ä ‡§â‡§∏‡•á ‡§´‡§≤ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§"</em></p>
                </div>
            </div>

            <div class="karma-stages">
                <div class="stage-card" onclick="showKarmaStage1()">
                    <div class="stage-number">1</div>
                    <h3>The Anatomy of Karma</h3>
                    <p>Learn the 8 types of karma that bind the soul</p>
                    <div class="stage-progress">
                        <span>üéØ Master the 8 Veils of the Soul</span>
                        <div class="completion-badge ${userData.stage1Completed ? 'completed' : ''}">
                            ${userData.stage1Completed ? '‚úì Completed' : 'Not Started'}
                        </div>
                    </div>
                </div>
                
                <div class="stage-card ${userData.stage1Completed ? '' : 'locked'}" onclick="showKarmaStage2()">
                    <div class="stage-number">2</div>
                    <h3>The Lifecycle of Karma</h3>
                    <p>Understand the 10 states through which karma flows</p>
                    <div class="stage-progress">
                        <span>‚ö° Master Karmic Dynamics</span>
                        <div class="completion-badge">
                            ${userData.stage1Completed ? 'Available' : 'üîí Complete Stage 1 first'}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// Stage 1: The Anatomy of Karma
function showKarmaStage1() {
    const mainContent = document.querySelector('.main-content');
    mainContent.innerHTML = `
        <div class="karma-stage1">
            <header class="karma-header">
                <button class="back-button" onclick="showKarmaLearning()">
                    ‚Üê Understanding Karma
                </button>
                <h1>Stage 1: The Anatomy of Karma</h1>
                <p>The 8 Veils of the Soul</p>
            </header>

            <div class="learning-progress">
                <div class="progress-bar-container">
                    <div class="progress-bar-fill" id="learning-progress" style="width: 0%"></div>
                </div>
                <p class="progress-text">Progress: <span id="progress-percentage">0</span>%</p>
            </div>

            <div id="lesson-content">
                <!-- Dynamic content will be loaded here -->
            </div>

            <div class="lesson-navigation">
                <button id="prev-btn" class="nav-btn" onclick="previousLesson()" disabled>Previous</button>
                <button id="next-btn" class="nav-btn" onclick="nextLesson()">Start Learning</button>
            </div>
        </div>
    `;
    
    // Initialize first lesson
    currentLessonIndex = 0;
    loadLesson(currentLessonIndex);
}

let currentLessonIndex = 0;
const lessons = [
    {
        type: 'introduction',
        title: 'Introduction to the 8 Karmas',
        content: 'Before we explore each karma type, let\'s understand that there are exactly 8 types of karma that bind every soul. These can be classified into two main categories based on their effects.'
    },
    ...karmaTypes.map(karma => ({
        type: 'karma-detail',
        karma: karma
    })),
    {
        type: 'classification',
        title: 'Classification: GhƒÅtiyƒÅ vs AghƒÅtiyƒÅ',
        content: 'Now let\'s classify these 8 karmas into two important categories.'
    },
    {
        type: 'quiz',
        title: 'Test Your Knowledge',
        content: 'Let\'s see how well you\'ve understood the 8 karma types.'
    }
];

function loadLesson(index) {
    const lesson = lessons[index];
    const content = document.getElementById('lesson-content');
    
    switch(lesson.type) {
        case 'introduction':
            content.innerHTML = createIntroductionLesson(lesson);
            break;
        case 'karma-detail':
            content.innerHTML = createKarmaDetailLesson(lesson.karma);
            break;
        case 'classification':
            content.innerHTML = createClassificationLesson();
            break;
        case 'quiz':
            content.innerHTML = createQuizLesson();
            break;
    }
    
    updateLessonProgress();
    updateNavigationButtons();
}

function createIntroductionLesson(lesson) {
    return `
        <div class="lesson-intro">
            <h2>${lesson.title}</h2>
            <div class="soul-display">
                <div class="pure-soul">
                    <div class="soul-core">ü§ç</div>
                    <p>Pure Soul</p>
                </div>
                <div class="arrow">‚Üí</div>
                <div class="bound-soul">
                    <div class="soul-core bound">üñ§</div>
                    <div class="karma-veils">
                        ${karmaTypes.map((karma, i) => `
                            <div class="veil veil-${i+1}" style="background: ${karma.color}"></div>
                        `).join('')}
                    </div>
                    <p>Soul with 8 Karmic Veils</p>
                </div>
            </div>
            <div class="intro-text">
                <p>${lesson.content}</p>
                <div class="key-points">
                    <h4>Key Points:</h4>
                    <ul>
                        <li><strong>GhƒÅtiyƒÅ Karmas (4):</strong> Directly harm the soul's inherent qualities</li>
                        <li><strong>AghƒÅtiyƒÅ Karmas (4):</strong> Affect the body and external circumstances</li>
                        <li>Each karma has specific causes and effects</li>
                        <li>Understanding karma helps in spiritual progress</li>
                    </ul>
                </div>
            </div>
        </div>
    `;
}

function createKarmaDetailLesson(karma) {
    const lang = currentLanguage;
    const name = lang === 'hi' ? karma.nameHi : karma.name;
    const func = lang === 'hi' ? karma.functionHi : karma.function;
    const analogy = lang === 'hi' ? karma.analogyHi : karma.analogy;
    
    return `
        <div class="karma-detail-lesson">
            <div class="karma-header-detail" style="border-left: 6px solid ${karma.color}">
                <div class="karma-icon-large">${karma.particles}</div>
                <div class="karma-info">
                    <h2>${name}</h2>
                    <p class="karma-type-badge ${karma.type}">${karma.type === 'ghatiya' ? 'GhƒÅtiyƒÅ (Destructive)' : 'AghƒÅtiyƒÅ (Non-Destructive)'}</p>
                </div>
            </div>
            
            <div class="karma-details-grid">
                <div class="detail-card">
                    <h4>Function</h4>
                    <p>${func}</p>
                </div>
                
                <div class="detail-card">
                    <h4>Analogy</h4>
                    <p><em>${analogy}</em></p>
                </div>
                
                <div class="detail-card">
                    <h4>Causes of Bondage</h4>
                    <ul>
                        ${(lang === 'hi' ? karma.causesHi : karma.causes).map(cause => `<li>${cause}</li>`).join('')}
                    </ul>
                </div>
                
                ${karma.subtypes ? `
                    <div class="detail-card">
                        <h4>Subtypes</h4>
                        <ul>
                            ${(lang === 'hi' ? karma.subtypesHi : karma.subtypes).map(subtype => `<li>${subtype}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
            </div>
            
            <div class="interactive-demo">
                <h4>Interactive Demonstration</h4>
                <div class="demo-soul" id="demo-soul-${karma.id}">
                    <div class="soul-core">ü§ç</div>
                    <button class="demo-btn" onclick="demonstrateKarma('${karma.id}')">
                        Attach ${karma.name}
                    </button>
                </div>
            </div>
        </div>
    `;
}

function createClassificationLesson() {
    return `
        <div class="classification-lesson">
            <h2>Classification: GhƒÅtiyƒÅ vs AghƒÅtiyƒÅ</h2>
            
            <div class="classification-intro">
                <p>The 8 karmas are classified into two fundamental categories based on how they affect the soul:</p>
            </div>
            
            <div class="classification-grid">
                <div class="classification-card ghatiya">
                    <h3>GhƒÅtiyƒÅ Karmas (‡§ò‡§æ‡§§‡§ø‡§Ø‡§æ ‡§ï‡§∞‡•ç‡§Æ)</h3>
                    <p><strong>Definition:</strong> These karmas directly destroy or obscure the soul's inherent qualities of knowledge, perception, bliss, and energy.</p>
                    <div class="karma-list" id="ghatiya-list">
                        <p>Drag the correct karmas here:</p>
                    </div>
                </div>
                
                <div class="classification-card aghatiya">
                    <h3>AghƒÅtiyƒÅ Karmas (‡§Ö‡§ò‡§æ‡§§‡§ø‡§Ø‡§æ ‡§ï‡§∞‡•ç‡§Æ)</h3>
                    <p><strong>Definition:</strong> These karmas do not directly harm the soul's nature but affect the body, lifespan, and external circumstances.</p>
                    <div class="karma-list" id="aghatiya-list">
                        <p>Drag the correct karmas here:</p>
                    </div>
                </div>
            </div>
            
            <div class="draggable-karmas" id="draggable-karmas">
                ${karmaTypes.map(karma => `
                    <div class="draggable-karma" data-karma="${karma.id}" data-type="${karma.type}" 
                         style="border-left: 4px solid ${karma.color}" draggable="true">
                        ${karma.particles} ${karma.name}
                    </div>
                `).join('')}
            </div>
            
            <div class="classification-result" id="classification-result" style="display: none;">
                <h4>Excellent! You've correctly classified all karmas.</h4>
                <div class="explanation">
                    <p><strong>GhƒÅtiyƒÅ Karmas:</strong> J√±ƒÅnƒÅvara·πáa, Dar≈õanƒÅvara·πáa, Mohanƒ´ya, AntarƒÅya</p>
                    <p><strong>AghƒÅtiyƒÅ Karmas:</strong> Vedanƒ´ya, ƒÄyu, NƒÅma, Gotra</p>
                </div>
            </div>
        </div>
    `;
}

function createQuizLesson() {
    return `
        <div class="quiz-lesson">
            <h2>Test Your Knowledge</h2>
            <div class="quiz-container" id="quiz-container">
                <!-- Quiz questions will be loaded here -->
            </div>
        </div>
    `;
}

// Navigation functions
function nextLesson() {
    if (currentLessonIndex < lessons.length - 1) {
        currentLessonIndex++;
        loadLesson(currentLessonIndex);
    } else {
        // Complete stage 1
        userData.stage1Completed = true;
        showStageCompletion();
    }
}

function previousLesson() {
    if (currentLessonIndex > 0) {
        currentLessonIndex--;
        loadLesson(currentLessonIndex);
    }
}

function updateLessonProgress() {
    const progress = ((currentLessonIndex + 1) / lessons.length) * 100;
    document.getElementById('learning-progress').style.width = progress + '%';
    document.getElementById('progress-percentage').textContent = Math.round(progress);
}

function updateNavigationButtons() {
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    prevBtn.disabled = currentLessonIndex === 0;
    
    if (currentLessonIndex === lessons.length - 1) {
        nextBtn.textContent = 'Complete Stage 1';
    } else {
        nextBtn.textContent = 'Next';
    }
}

function demonstrateKarma(karmaId) {
    const karma = karmaTypes.find(k => k.id === karmaId);
    const demoSoul = document.getElementById(`demo-soul-${karmaId}`);
    
    // Add visual effect
    const particle = document.createElement('div');
    particle.className = 'karma-particle';
    particle.textContent = karma.particles;
    particle.style.color = karma.color;
    demoSoul.appendChild(particle);
    
    showNotification(`${karma.name} attached! ${karma.analogy}`, 'info');
}

function showStageCompletion() {
    const mainContent = document.querySelector('.main-content');
    mainContent.innerHTML = `
        <div class="stage-completion">
            <div class="completion-header">
                <h1>üéâ Stage 1 Complete!</h1>
                <p>You have mastered the 8 types of karma</p>
            </div>
            
            <div class="completion-summary">
                <h3>What you learned:</h3>
                <ul>
                    <li>‚úì All 8 types of karma and their functions</li>
                    <li>‚úì Classification into GhƒÅtiyƒÅ and AghƒÅtiyƒÅ</li>
                    <li>‚úì Specific causes of karmic bondage</li>
                    <li>‚úì Analogies to understand each karma</li>
                </ul>
            </div>
            
            <div class="completion-actions">
                <button class="primary-btn" onclick="showKarmaStage2()">
                    Continue to Stage 2: Lifecycle of Karma
                </button>
                <button class="secondary-btn" onclick="showKarmaLearning()">
                    Return to Overview
                </button>
            </div>
        </div>
    `;
    
    // Award XP
    userData.xp += 50;
    updateUserStats();
    showNotification('Stage 1 completed! +50 XP earned!', 'success');
}

// Stage 2: The Lifecycle of Karma
function showKarmaStage2() {
    if (!userData.stage1Completed) {
        showNotification('Please complete Stage 1 first!', 'error');
        return;
    }
    
    const mainContent = document.querySelector('.main-content');
    mainContent.innerHTML = `
        <div class="karma-stage2">
            <header class="karma-header">
                <button class="back-button" onclick="showKarmaLearning()">
                    ‚Üê Understanding Karma
                </button>
                <h1>Stage 2: The Lifecycle of Karma</h1>
                <p>The 10 States of Karmic Flow</p>
            </header>

            <div class="karma-timeline">
                <h3>The Journey of a Karma Particle</h3>
                <div class="timeline-container">
                    ${karmaStates.map((state, index) => `
                        <div class="timeline-item" onclick="exploreKarmaState('${state.id}')" style="background: ${state.color}">
                            <div class="timeline-number">${index + 1}</div>
                            <h4>${state.name}</h4>
                            <p>${state.definition}</p>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="factory-analogy">
                <h3>The Factory Job Analogy</h3>
                <p>Understanding karma states through a simple job contract example:</p>
                <div class="analogy-steps" id="analogy-steps">
                    <!-- Will be populated with interactive steps -->
                </div>
            </div>
        </div>
    `;
    
    loadFactoryAnalogy();
}

function loadFactoryAnalogy() {
    const container = document.getElementById('analogy-steps');
    container.innerHTML = `
        <div class="analogy-step" data-state="bandha">
            <h4>1. Bandha (Bondage)</h4>
            <p><strong>Factory Job:</strong> Getting hired for a 10-year contract on August 17, 2005</p>
            <p><strong>Karma:</strong> Soul binds with karmic matter due to activities</p>
        </div>
        
        <div class="analogy-step" data-state="sattva">
            <h4>2. Sattva (Existence)</h4>
            <p><strong>Factory Job:</strong> Period from Aug 17 to Oct 1, 2005 - hired but not working yet</p>
            <p><strong>Karma:</strong> Karma exists but remains inactive, like medicine before it takes effect</p>
        </div>
        
        <div class="analogy-step" data-state="udaya">
            <h4>3. Udaya (Fruition)</h4>
            <p><strong>Factory Job:</strong> Starting work on Oct 2, 2005 and receiving salary</p>
            <p><strong>Karma:</strong> Karma gives its results according to its nature and intensity</p>
        </div>
        
        <div class="analogy-step" data-state="udirana">
            <h4>4. Udƒ´ra·πáƒÅ (Premature Rise)</h4>
            <p><strong>Factory Job:</strong> Being called to start work on Oct 1st instead of 2nd</p>
            <p><strong>Karma:</strong> Bringing karma to fruition before its natural time through special circumstances</p>
        </div>
        
        <div class="analogy-step" data-state="apakrshana">
            <h4>5. Apakar·π£a·πáa (Attenuation)</h4>
            <p><strong>Factory Job:</strong> Contract reduced from 10 years to 9 years due to good performance</p>
            <p><strong>Karma:</strong> Reducing intensity through spiritual practices. Example: King Shrenika's hell-life reduced from 33 sagaras to 84,000 years</p>
        </div>
        
        <div class="analogy-step" data-state="utkarshana">
            <h4>6. Utkar·π£a·πáa (Intensification)</h4>
            <p><strong>Factory Job:</strong> Contract extended from 10 years to 11 years due to additional responsibilities</p>
            <p><strong>Karma:</strong> Increasing intensity through negative actions or intense passions</p>
        </div>
        
        <div class="analogy-step" data-state="sankramana">
            <h4>7. Sa·πÖkrama·πáa (Transformation)</h4>
            <p><strong>Factory Job:</strong> Being transferred to a different department in the same company</p>
            <p><strong>Karma:</strong> One karma subtype transforming into another of the same main type</p>
        </div>
        
        <div class="analogy-step" data-state="upashama">
            <h4>8. Upa≈õama (Suppression)</h4>
            <p><strong>Factory Job:</strong> Factory temporarily closed but contract remains valid</p>
            <p><strong>Karma:</strong> Temporarily stopping karma's effects without destroying it</p>
        </div>
        
        <div class="analogy-step" data-state="nidhatti">
            <h4>9. Nidhatti (Non-ejectable)</h4>
            <p><strong>Factory Job:</strong> Permanent position that cannot be changed easily</p>
            <p><strong>Karma:</strong> Karma that cannot be brought to premature fruition or transformed</p>
        </div>
        
        <div class="analogy-step" data-state="nikachitta">
            <h4>10. NikƒÅcitta (Absolutely Fixed)</h4>
            <p><strong>Factory Job:</strong> Final contract terms that cannot be altered in any way</p>
            <p><strong>Karma:</strong> Completely fixed karma that cannot undergo any modifications</p>
        </div>
    `;
}

function exploreKarmaState(stateId) {
    const state = karmaStates.find(s => s.id === stateId);
    const lang = currentLanguage;
    
    showNotification(`${state.name}: ${lang === 'hi' ? state.definitionHi : state.definition}`, 'info');
}

// Other existing functions...
function updateUserStats() {
    document.getElementById('user-xp').textContent = userData.xp;
    document.getElementById('user-level').textContent = userData.level;
    document.getElementById('total-xp').textContent = userData.xp;
    document.getElementById('daily-streak').textContent = userData.streak;
    document.getElementById('current-level').textContent = userData.level;
}

function initializeDailyPrashna() {
    const revealButton = document.getElementById('reveal-answer');
    const answerContainer = document.getElementById('answer-container');
    
    if (revealButton) {
        revealButton.addEventListener('click', () => {
            answerContainer.classList.remove('hidden');
            revealButton.style.display = 'none';
            userData.xp += 10;
            updateUserStats();
        });
    }
}

function goBackToUniverses() {
    location.reload();
}

// Initialize install prompt and other existing functions remain the same...
let deferredPrompt;
let installPromptEl;

function initializeInstallPrompt() {
    installPromptEl = document.createElement('div');
    installPromptEl.className = 'install-prompt';
    installPromptEl.innerHTML = `
        <div>
            <strong>Install Jinasaraswati</strong>
            <p>Install this app on your device for better experience</p>
        </div>
        <div>
            <button id="install-btn">Install</button>
            <button class="close-btn" id="close-install">√ó</button>
        </div>
    `;
    
    document.body.appendChild(installPromptEl);
    
    document.getElementById('install-btn').addEventListener('click', installApp);
    document.getElementById('close-install').addEventListener('click', () => {
        installPromptEl.classList.remove('show');
    });
}

function installApp() {
    if (deferredPrompt) {
        deferredPrompt.prompt();
        deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
                console.log('User accepted the install prompt');
            }
            deferredPrompt = null;
            installPromptEl.classList.remove('show');
        });
    }
}

window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;
    
    setTimeout(() => {
        if (installPromptEl) {
            installPromptEl.classList.add('show');
        }
    }, 5000);
});

window.addEventListener('appinstalled', () => {
    console.log('PWA was installed');
    if (installPromptEl) {
        installPromptEl.remove();
    }
    deferredPrompt = null;
});
